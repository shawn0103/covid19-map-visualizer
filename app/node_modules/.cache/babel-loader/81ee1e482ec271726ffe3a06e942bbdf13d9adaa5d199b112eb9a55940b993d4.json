{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Search a node and its children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nfunction filter(test, node, recurse, limit) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n  if (limit === void 0) {\n    limit = Infinity;\n  }\n  if (!Array.isArray(node)) node = [node];\n  return find(test, node, recurse, limit);\n}\nexports.filter = filter;\n/**\n * Search an array of node and its children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nfunction find(test, nodes, recurse, limit) {\n  var result = [];\n  for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n    var elem = nodes_1[_i];\n    if (test(elem)) {\n      result.push(elem);\n      if (--limit <= 0) break;\n    }\n    if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {\n      var children = find(test, elem.children, recurse, limit);\n      result.push.apply(result, children);\n      limit -= children.length;\n      if (limit <= 0) break;\n    }\n  }\n  return result;\n}\nexports.find = find;\n/**\n * Finds the first element inside of an array that matches a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n * @deprecated Use `Array.prototype.find` directly.\n */\nfunction findOneChild(test, nodes) {\n  return nodes.find(test);\n}\nexports.findOneChild = findOneChild;\n/**\n * Finds one element in a tree that passes a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first child node that passes `test`.\n */\nfunction findOne(test, nodes, recurse) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n  var elem = null;\n  for (var i = 0; i < nodes.length && !elem; i++) {\n    var checked = nodes[i];\n    if (!(0, domhandler_1.isTag)(checked)) {\n      continue;\n    } else if (test(checked)) {\n      elem = checked;\n    } else if (recurse && checked.children.length > 0) {\n      elem = findOne(test, checked.children, true);\n    }\n  }\n  return elem;\n}\nexports.findOne = findOne;\n/**\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing the test.\n */\nfunction existsOne(test, nodes) {\n  return nodes.some(function (checked) {\n    return (0, domhandler_1.isTag)(checked) && (test(checked) || checked.children.length > 0 && existsOne(test, checked.children));\n  });\n}\nexports.existsOne = existsOne;\n/**\n * Search and array of nodes and its children for elements passing a test function.\n *\n * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\nfunction findAll(test, nodes) {\n  var _a;\n  var result = [];\n  var stack = nodes.filter(domhandler_1.isTag);\n  var elem;\n  while (elem = stack.shift()) {\n    var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(domhandler_1.isTag);\n    if (children && children.length > 0) {\n      stack.unshift.apply(stack, children);\n    }\n    if (test(elem)) result.push(elem);\n  }\n  return result;\n}\nexports.findAll = findAll;","map":{"version":3,"mappings":"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","names":["filter","test","node","recurse","limit","Array","isArray","find","exports","nodes","result","nodes_1","_i","elem","push","children","length","findOneChild","findOne","i","checked","existsOne","some","findAll","stack","domhandler_1","shift","unshift"],"sources":["https://raw.githubusercontent.com/fb55/domutils/f7e357b5c210b6731c2a60e0b7b3cfaa1f96b706/src/querying.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}