{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultHandler = exports.DomUtils = exports.parseFeed = exports.getFeed = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DomHandler = exports.Parser = void 0;\nvar Parser_js_1 = require(\"./Parser.js\");\nObject.defineProperty(exports, \"Parser\", {\n  enumerable: true,\n  get: function () {\n    return Parser_js_1.Parser;\n  }\n});\nvar domhandler_1 = require(\"domhandler\");\nObject.defineProperty(exports, \"DomHandler\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_1.DomHandler;\n  }\n});\nObject.defineProperty(exports, \"DefaultHandler\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_1.DomHandler;\n  }\n});\n// Helper methods\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */\nfunction parseDocument(data, options) {\n  var handler = new domhandler_1.DomHandler(undefined, options);\n  new Parser_js_1.Parser(handler, options).end(data);\n  return handler.root;\n}\nexports.parseDocument = parseDocument;\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */\nfunction parseDOM(data, options) {\n  return parseDocument(data, options).children;\n}\nexports.parseDOM = parseDOM;\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param cb A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.\n */\nfunction createDomStream(cb, options, elementCb) {\n  var handler = new domhandler_1.DomHandler(cb, options, elementCb);\n  return new Parser_js_1.Parser(handler, options);\n}\nexports.createDomStream = createDomStream;\nvar Tokenizer_js_1 = require(\"./Tokenizer.js\");\nObject.defineProperty(exports, \"Tokenizer\", {\n  enumerable: true,\n  get: function () {\n    return __importDefault(Tokenizer_js_1).default;\n  }\n});\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */\nvar ElementType = __importStar(require(\"domelementtype\"));\nexports.ElementType = ElementType;\nvar domutils_1 = require(\"domutils\");\nObject.defineProperty(exports, \"getFeed\", {\n  enumerable: true,\n  get: function () {\n    return domutils_1.getFeed;\n  }\n});\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */\nfunction parseFeed(feed, options) {\n  if (options === void 0) {\n    options = {\n      xmlMode: true\n    };\n  }\n  return (0, domutils_1.getFeed)(parseDOM(feed, options));\n}\nexports.parseFeed = parseFeed;\nexports.DomUtils = __importStar(require(\"domutils\"));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACSA;EAAAC;EAAAC;IAAA,OADAC,kBAAM;EAAA;AAAA;AAGf;AAQSH;EAAAC;EAAAC;IAAA,OAPLE,uBAAU;EAAA;AAAA;AAqFSJ;EAAAC;EAAAC;IAAA,OArFnBE,uBAAU;EAAA;AAAA;AAWd;AAEA;;;;;;AAMA,SAAgBC,aAAa,CAACC,IAAY,EAAEC,OAAiB;EACzD,IAAMC,OAAO,GAAG,IAAIJ,uBAAU,CAACK,SAAS,EAAEF,OAAO,CAAC;EAClD,IAAIJ,kBAAM,CAACK,OAAO,EAAED,OAAO,CAAC,CAACG,GAAG,CAACJ,IAAI,CAAC;EACtC,OAAOE,OAAO,CAACG,IAAI;AACvB;AAJAC;AAKA;;;;;;;;;;AAUA,SAAgBC,QAAQ,CAACP,IAAY,EAAEC,OAAiB;EACpD,OAAOF,aAAa,CAACC,IAAI,EAAEC,OAAO,CAAC,CAACO,QAAQ;AAChD;AAFAF;AAGA;;;;;;;AAOA,SAAgBG,eAAe,CAC3BC,EAAmD,EACnDT,OAAiB,EACjBU,SAAsC;EAEtC,IAAMT,OAAO,GAAG,IAAIJ,uBAAU,CAACY,EAAE,EAAET,OAAO,EAAEU,SAAS,CAAC;EACtD,OAAO,IAAId,kBAAM,CAACK,OAAO,EAAED,OAAO,CAAC;AACvC;AAPAK;AASA;AACIZ;EAAAC;EAAAC;IAAA,8CAAO;EAAA;AAAA;AAIX;;;;AAIA;AACSU;AAET;AAESZ;EAAAC;EAAAC;IAAA,OAFAgB,kBAAO;EAAA;AAAA;AAIhB;;;;;;AAMA,SAAgBC,SAAS,CACrBC,IAAY,EACZb,OAA8D;EAA9D;IAAAA;MAA+Cc,OAAO,EAAE;IAAI,CAAE;EAAA;EAE9D,OAAO,sBAAO,EAACR,QAAQ,CAACO,IAAI,EAAEb,OAAO,CAAC,CAAC;AAC3C;AALAK;AAOAA","names":["Object","enumerable","get","Parser_js_1","domhandler_1","parseDocument","data","options","handler","undefined","end","root","exports","parseDOM","children","createDomStream","cb","elementCb","domutils_1","parseFeed","feed","xmlMode"],"sources":["https://raw.githubusercontent.com/fb55/htmlparser2/4763205746cd80120b5d2b69041197a394d24ba9/src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}